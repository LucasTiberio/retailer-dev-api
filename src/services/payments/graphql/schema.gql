extend type Query {
  listAvailablePlans: [Plan]! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  listOrganizationCustomerPayment: [OrganizationCustomerPayment]! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  getSubscriptionByOrganizationId(input: GetSubscriptionByOrganizationIdInput): Subscription @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
}

extend type Mutation {
  sendRecurrencyTransaction(input: SendRecurrencyTransactionInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  createEnterpriseRecurrencyTransaction(input: CreateEnterpriseRecurrencyTransaction!): Boolean! @hasEnterpriseToken
  updateRecurrencyTransaction(input: UpdateRecurrencyTransactionInput!): Subscription! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  cancelRecurrencyTransaction: Subscription! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  activateRecurrencyTransaction: Subscription! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  createOrganizationCustomer(input: CreateOrganizationCustomerInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  editOrganizationCustomer(input: EditOrganizationCustomerInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  createOrganizationCustomerPayment(input: CreateOrganizationCustomerPaymentInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
  removeOrganizationCustomerPayment(input: RemoveOrganizationCustomerPaymentInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @acceptTermsAndConditions @isVerified @isAuthenticated
}

input CreateEnterpriseRecurrencyTransaction {
  zipCode: String!
  number: String!
  complement: String
  cpfCnpj: String!
  valueCents: Int!
  organizationId: String!
}

type InvoiceData {
  cpfCnpj: String!
  zipCode: String!
  number: String!
  complement: String
  city: String!
  state: String!
  district: String!
  street: String!
}

input UpdateRecurrencyTransactionInput {
  planIdentifier: String!
  payableWith: PayableWith!
}

input SendRecurrencyTransactionInput {
  planIdentifier: String!
  payableWith: PayableWith!
  marketingData: RecurrencyMarketingData
}

input RecurrencyMarketingData {
  utmSource: String
  utmCampaign: String
}

enum PayableWith {
  bank_slip
  credit_card
}

input GetSubscriptionByOrganizationIdInput {
  organizationId: String!
}

type OrganizationCustomerPayment {
  id: String!
  description: String!
  itemType: String!
  data: PaymentMethodData!
}

input RemoveOrganizationCustomerPaymentInput {
  paymentId: String!
}

type PaymentMethodData {
  brand: String!
  holder: String!
  lastDigits: String!
}

input CreateOrganizationCustomerPaymentInput {
  description: String
  token: String!
}

input CreateOrganizationCustomerInput {
  zipCode: String!
  number: String!
  cpfCnpj: String!
  complement: String
}

input EditOrganizationCustomerInput {
  zipCode: String!
  number: String!
  cpfCnpj: String!
  complement: String
}

type Plan {
  id: String!
  interval: Int!
  intervalType: String!
  name: String!
  payableWith: String!
  price: Float!
  bestPrice: Boolean!
  planRules: [PlanRules]!
}

type PlanRules {
  serviceName: String!
  rules: Rules!
}

type Rules {
  maxTransactionTax: Int!
  maxTeammates: Int!
  maxAnalysts: Int!
  maxSales: Int!
  support: String!
  training: Boolean!
  sso: Boolean!
  affiliateStore: Boolean!
}

type Subscription {
  id: String!
  suspended: Boolean!
  planIdentifier: String!
  priceCents: Int!
  currency: String!
  expiresAt: String
  createdAt: String!
  updatedAt: String!
  customerPaymentInfos: OrganizationCustomerPayment
  cycledAt: String!
  invoiceData: InvoiceData
  payableWith: String!
  planName: String!
  active: Boolean!
  recentInvoices: [IuguRecentInvoices]!
}

type IuguRecentInvoices {
  id: String!
  dueDate: String!
  status: String!
  total: String!
  secureUrl: String!
}
