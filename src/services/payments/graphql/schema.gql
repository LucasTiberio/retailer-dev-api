extend type Query{
  listAvailablePlans: [Plan]! @isVerified @isAuthenticated
  listOrganizationCustomerPayment: [OrganizationCustomerPayment]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  getSubscriptionByOrganizationId(input: GetSubscriptionByOrganizationIdInput): Subscription! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

extend type Mutation{
  sendRecurrencyTransaction(input: SendRecurrencyTransactionInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  updateRecurrencyTransaction(input: UpdateRecurrencyTransactionInput!): Subscription! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  cancelRecurrencyTransaction: Subscription! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  activateRecurrencyTransaction: Subscription! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  createOrganizationCustomer(input: CreateOrganizationCustomerInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  createOrganizationCustomerPayment(input: CreateOrganizationCustomerPaymentInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  removeOrganizationCustomerPayment(input: RemoveOrganizationCustomerPaymentInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input UpdateRecurrencyTransactionInput {
  planIdentifier: String!
  payableWith: PayableWith!
}

input SendRecurrencyTransactionInput {
  planIdentifier: String!
  payableWith: PayableWith!
}

enum PayableWith{
  bank_slip
  credit_card
}

input GetSubscriptionByOrganizationIdInput{
  organizationId: String!
}

type OrganizationCustomerPayment{
  id: String!
  description: String!
  itemType: String!
  data: PaymentMethodData!
}

input RemoveOrganizationCustomerPaymentInput {
  paymentId: String!
}

type PaymentMethodData{
  brand: String!
  holder: String!
  lastDigits: String!
}

input CreateOrganizationCustomerPaymentInput{
  description: String
  token: String!
}

input CreateOrganizationCustomerInput{
  zipCode: String!
  number: String!
  cpfCnpj: String!
}

type Plan{
  id: String!
  interval: Int!
  intervalType: String!
  name: String!
  payableWith: String!
  price: Float!
  affiliateRules: AffiliateRules
  suport: [PlanSuport]!
  benefits: [PlanBenefits]!
  flags: PlanFlags
}

type PlanSuport {
    type: String!
    time: Int!
    measure: String!
}

type PlanBenefits {
    training: Boolean!
    sso: Boolean!
}

type PlanFlags {
    bestPrice: Boolean!
}

type AffiliateRules{
  maxAnalysts: Int!
  maxSales: Int!
  maxTeammates: Int!
  maxTransactionTax: Int!
}

type Subscription{
  id: String!
  suspended: Boolean!
  planIdentifier: String!
  priceCents: Int!
  currency: String!
  expiresAt: String
  createdAt: String!
  updatedAt: String!
  cycledAt: String!
  payableWith: String!
  planName: String!
  active: Boolean!
  recentInvoices: [IuguRecentInvoices]!
}

type IuguRecentInvoices{
  id: String!
  dueDate: String!
  status: String!
  total: String!
  secureUrl: String!
}