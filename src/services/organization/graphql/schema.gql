extend type Query{
  verifyOrganizationName(input: VerifyOrganizationNameInput!): Boolean @isAuthenticated
  listMyOrganizations: [Organization]! @isVerified @isAuthenticated
  organizationDetails(input: OrganizationDetailsInput!): Organization! @hasOrganizationRole(role: ["ADMIN", "MEMBER"]) @isVerified @isAuthenticated
  listUsersInOrganization(input: ListUsersInOrganizationInput!): [UserOrganization]! @hasOrganizationRole(role: ["ADMIN", "MEMBER"]) @isVerified @isAuthenticated
  findUsersToOrganization(input: FindUsersToOrganizationInput!): [FindUsersToOrganizationPayload]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input OrganizationDetailsInput{
  organizationName: String!
}

input ListUsersInOrganizationInput{
  name: String
  organizationId: String!
}

input FindUsersToOrganizationInput{
  name: String!
  organizationId: String!
}

type FindUsersToOrganizationPayload{
  user: User!
  inviteStatus: OrganizationInviteStatus
}

input VerifyOrganizationNameInput{
  name: String!
}

extend type Mutation{
  createOrganization(input: CreateOrganizationInput!): Organization! @isVerified @isAuthenticated 
  inviteUserToOrganization(input: InviteUserToOrganizationInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  responseOrganizationInvite(input: ResponseOrganizationInviteInput!): Boolean!
  inativeUserInOrganization(input: InativeUserInOrganizationInput!): UserOrganization! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  handleUserPermissionInOrganization(input: HandleUserPermissionInOrganizationInput!): UserOrganizationRole! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input HandleUserPermissionInOrganizationInput{
  userId: String!
  organizationId: String!
  permission: OrganizationRoleName!
}

input InativeUserInOrganizationInput{
  userId: String!
  organizationId: String!
}

input ResponseOrganizationInviteInput{
  inviteHash: String!
  response: OrganizationInviteStatus!
}

enum OrganizationInviteStatus {
    refused,
    pendent,
    accept,
    exited
}

input InviteUserToOrganizationInput {
  organizationId: String!
  users: [InviteUsersInput]!
}

input InviteUsersInput {
  id: String
  email: String!
}

input CreateOrganizationInput{
  name: String!
  contactEmail: String!
}

type Organization{
  name: String!
  contactEmail: String!
  id: String!
  active: Boolean!
  user: User! @isVerified @isAuthenticated # TODO somente admin pode ver o founder
  updatedAt: Datetime!
  createdAt: Datetime!
  hasMember: Boolean!
  organizationRole: [OrganizationRole]!
  services: [Service]!
}

type UserOrganizationRole{
  id: String!
  userOrganization: UserOrganization!
  organizationRole: OrganizationRole!
  createdAt: Datetime!
  updatedAt: Datetime!
}

type UserOrganization{
  id: String!
  inviteStatus: OrganizationInviteStatus!
  inviteHash: String
  updatedAt: Datetime!
  createdAt: Datetime!
  organization: Organization!
  user: User!
  active: Boolean!
  organizationRole: OrganizationRole!
}

type OrganizationRole{
    id: String!
    name: OrganizationRoleName!
    createdAt: Datetime!
    updatedAt: Datetime!
}

enum OrganizationRoleName {
    ADMIN,
    MEMBER
}