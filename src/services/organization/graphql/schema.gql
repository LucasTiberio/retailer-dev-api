extend type Query{
  verifyOrganizationName(input: VerifyOrganizationNameInput!): Boolean @isAuthenticated
  findUsersToOrganization(input: FindUsersToOrganizationInput!): [FindUsersToOrganizationPayload]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input FindUsersToOrganizationInput{
  name: String!
  organizationId: String!
}

type FindUsersToOrganizationPayload{
  user: User!
  inviteStatus: OrganizationInviteStatus
  usersOrganizationsId: String
}

input VerifyOrganizationNameInput{
  name: String!
}

extend type Mutation{
  createOrganization(input: CreateOrganizationInput!): Organization! @isVerified @isAuthenticated 
  inviteUserToOrganization(input: InviteUserToOrganizationInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated
  responseOrganizationInvite(input: ResponseOrganizationInviteInput!): Boolean!
}

input ResponseOrganizationInviteInput{
  inviteHash: String!
  response: OrganizationInviteStatus!
}

enum OrganizationInviteStatus {
    refused,
    pendent,
    accept,
    exited
}

input InviteUserToOrganizationInput {
  organizationId: String!
  users: [InviteUsersInput]!
}

input InviteUsersInput {
  id: String
  email: String!
}

input CreateOrganizationInput{
  name: String!
  contactEmail: String!
}

type Organization{
  name: String!
  contactEmail: String!
  id: String!
  user: User! @isVerified @isAuthenticated
  active: Boolean!
  updatedAt: Datetime!
  createdAt: Datetime!
}