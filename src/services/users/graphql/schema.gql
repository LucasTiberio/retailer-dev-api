extend type Query {
  getUser: User! @acceptTermsAndConditions @isVerified @isAuthenticated
  isUserVerified: Boolean! @acceptTermsAndConditions @isAuthenticated
  getOrganizationsWaitingForApproval: [Organization]! @acceptTermsAndConditions @isAuthenticated
  getUserPendencies: [UserPendenciesWithMetadata]! @hasOrganizationRole(role: ["ADMIN", "MEMBER"]) @acceptTermsAndConditions @isVerified @isAuthenticated
}

extend type Mutation {
  signUp(input: SignUpInput!): User!
  resendConfirmationEmail: Boolean! @acceptTermsAndConditions @isAuthenticated
  signUpWithOrganization(input: SignUpWithOrganizationInput!): User!
  userVerifyEmail(input: UserVerifyEmailInput!): Boolean
  userRecoveryPassword(input: UserRecoveryPasswordInput!): Boolean
  userPasswordChange(input: UserPasswordChangeInput!): Boolean
}

input UserPasswordChangeInput {
  hash: String!
  password: String!
}

input UserRecoveryPasswordInput {
  email: String!
}

input UserVerifyEmailInput {
  verificationHash: String!
}

input SignUpInput {
  username: String!
  birthDate: String
  gender: UserGender
  email: String!
  password: String!
  document: String!
  documentType: DocumentType!
  phone: String
  position: String
}

input SignUpWithOrganizationInput {
  username: String!
  email: String!
  password: String!
  document: String!
  documentType: DocumentType!
  phone: String!
  organizationInfos: OrganizationInfos!
}

input OrganizationInfos {
  organization: OrganizationInput!
  additionalInfos: AdditionalInfos!
}

type User {
  id: String!
  username: String
  birthDate: Date
  gender: UserGender
  email: String!
  document: String
  documentType: DocumentType
  phone: String
  position: String
  organizations(organizationId: String): [Organization]!
  token: String
}

enum DocumentType {
  rg
  cnpj
  cpf
}

type UserPendenciesWithMetadata {
  pendency: UserPendencies!
  metadata: String
}

enum UserPendencies {
  PLUG_FORM,
  HUBLY_INVOICE
}

enum UserGender {
  male,
  female,
  undefined
}