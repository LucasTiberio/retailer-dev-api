extend type Query {
  listAvailableServices: [Service]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  listAvailableUsersToService(input: ListAvailableUsersToServiceInput!): [UserOrganization]! @hasServiceRole(role: ["ADMIN"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  listAffiliatesMembers(input: ListAffiliatesMembersInput): ListAffiliatesMembersPayload! @hasServiceRole(role: ["ADMIN", "ANALYST", "RESPONSIBLE", "SALE"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  getUserInOrganizationService(input: GetUserInOrganizationServiceInput!): UserOrganizationService @hasOrganizationRole(role: ["ADMIN", "MEMBER"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  getUserOrganizationByServiceName(input: GetUserOrganizationByServiceNameInput!): UserOrganizationService @hasServiceRole(role: ["ADMIN", "ANALYST", "RESPONSIBLE", "SALE"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  getUserInOrganizationServiceById(input: GetUserInOrganizationServiceByIdInput!): UserOrganizationService @hasOrganizationRole(role: ["ADMIN"]) @isVerified @acceptTermsAndConditions @isAuthenticated
  affiliatesCapacities: AffiliatesCapacities @hasOrganizationRole(role: ["ADMIN"]) @isVerified @acceptTermsAndConditions @isAuthenticated
}

type AffiliatesCapacities {
  analyst: CapacitiesValues!
  sale: CapacitiesValues
}

type CapacitiesValues {
  total: Int!
  used: Int!
}

input ListAffiliatesMembersInput {
  name: String
  offset: Int
  limit: Int
}

type ListAffiliatesMembersPayload {
  count: String!
  offset: Int
  limit: Int
  affiliates: [UserOrganizationService]!
}

input GetUserOrganizationByServiceNameInput {
  serviceName: ServiceName!
}

input GetUserInOrganizationServiceInput {
  userOrganizationId: String!
}

input GetUserInOrganizationServiceByIdInput {
  userOrganizationServiceId: String!
}

extend type Mutation {
  createServiceInOrganization(input: CreateServiceInOrganizationInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @organizationPaidVerify @isVerified @acceptTermsAndConditions @isAuthenticated
  addUserInOrganizationService(input: AddUserInOrganizationServiceInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @organizationPaidVerify @isVerified @acceptTermsAndConditions @isAuthenticated
  handleServiceMembersRole(input: HandleServiceMembersRoleInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @organizationPaidVerify @isVerified @acceptTermsAndConditions @isAuthenticated
  inativeUserFromServiceOrganization(input: InativeUserFromServiceOrganizationInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @organizationPaidVerify @isVerified @acceptTermsAndConditions @isAuthenticated
}

input InativeUserFromServiceOrganizationInput {
  serviceName: ServiceName!
  userId: String!
}

input HandleServiceMembersRoleInput {
  serviceName: ServiceName!
  serviceRole: ServiceRolesName!
  userOrganizationServiceRoleId: String!
}

input ListAvailableUsersToServiceInput {
  serviceName: ServiceName!
  name: String!
}

type UserOrganizationService {
  id: String!
  showFirstSteps: Boolean!
  service: Service!
  serviceRoles: ServiceRoles!
  active: Boolean!
  userOrganization: UserOrganization
  createdAt: Datetime!
  updatedAt: Datetime!
  slug: String
  cluster: HublyClusterPayload
  lastGeneratedUrl: ShortenerUrl
}

type ServiceRoles {
  id: String!
  name: String!
  createdAt: Datetime!
  updatedAt: Datetime!
}

input AddUserInOrganizationServiceInput {
  userId: String!
  serviceName: ServiceName!
}

enum ServiceName {
  affiliate
  teste
}

enum ServiceRolesName {
  ADMIN
  RESPONSIBLE
  ANALYST
  SALE
}

input ServiceInput {
  name: ServiceName
  role: ServiceRolesName
}

type Service {
  id: String!
  name: String!
  active: Boolean!
  updatedAt: Datetime!
  createdAt: Datetime!
  hasOrganization: Boolean
  serviceRoles: [ServiceRoles]!
}

input CreateServiceInOrganizationInput {
  serviceId: String!
  organizationId: String!
}
