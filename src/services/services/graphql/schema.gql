extend type Query{
    listAvailableServices(input: ListAvailableServicesInput!): [Service]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
    listAvailableUsersToService(input: ListAvailableUsersToServiceInput!): [UserOrganization]! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
}

extend type Mutation{
    createServiceInOrganization(input: CreateServiceInOrganizationInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
    addUserInOrganizationService(input: AddUserInOrganizationServiceInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input ListAvailableUsersToServiceInput{
    organizationId: String!
    serviceName: ServiceName!
    name: String!
}

type UserOrganizationService{
    id: String!
    service: Service!
    serviceRoles: ServiceRoles!
    userOrganization: UserOrganization!
    createdAt: Datetime!
    updatedAt: Datetime!
}

type ServiceRoles{
    id: String!
    name: String!
    createdAt: Datetime!
    updatedAt: Datetime!
}

input AddUserInOrganizationServiceInput{
    userId: String!
    organizationId: String!
    serviceName: ServiceName!
}

enum ServiceName {
    affiliate
    teste
}

input ListAvailableServicesInput {
    organizationId: String!
}

type Service{
    id: String!
    name: String!
    active: Boolean!
    updatedAt: Datetime!
    createdAt: Datetime!
    hasOrganization: Boolean
}

input CreateServiceInOrganizationInput{
    serviceId: String!
    organizationId: String!
}