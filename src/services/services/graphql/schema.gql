extend type Query{
    listAvailableServices: [Service]! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
    listAvailableUsersToService(input: ListAvailableUsersToServiceInput!): [UserOrganization]! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
    listUsersInOrganizationService(input: ListUsersInOrganizationServiceInput!): [UserOrganizationService]! @hasServiceRole(role: ["ADMIN", "ANALYST", "RESPONSIBLE"]) @isVerified @isAuthenticated 
    getUserInOrganizationService(input: GetUserInOrganizationServiceInput!): UserOrganizationService @hasOrganizationRole(role: ["ADMIN", "MEMBER"]) @isVerified @isAuthenticated 
    getUserOrganizationByServiceName(input: GetUserOrganizationByServiceNameInput!): UserOrganizationService @hasServiceRole(role: ["ADMIN", "ANALYST", "RESPONSIBLE"]) @isVerified @isAuthenticated 
}

input GetUserOrganizationByServiceNameInput{
    serviceName: ServiceName!
}

input GetUserInOrganizationServiceInput {
    userOrganizationId: String!
}

extend type Mutation{
    createServiceInOrganization(input: CreateServiceInOrganizationInput!): Boolean! @hasOrganizationRole(role: ["ADMIN"]) @isVerified @isAuthenticated 
    addUserInOrganizationService(input: AddUserInOrganizationServiceInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated
    userInServiceHandleRole(input: UserInServiceHandleRoleInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated
    inativeUserFromServiceOrganization(input: InativeUserFromServiceOrganizationInput!): UserOrganizationService! @hasServiceRole(role: ["ADMIN"]) @isVerified @isAuthenticated
}

input InativeUserFromServiceOrganizationInput {
    serviceName: ServiceName!
    userId: String!
}

input UserInServiceHandleRoleInput{
    serviceName: ServiceName!
    userId: String!
    serviceRole: ServiceRolesName!
}

input ListUsersInOrganizationServiceInput{
    serviceName: ServiceName!
}

input ListAvailableUsersToServiceInput{
    serviceName: ServiceName!
    name: String!
}

type UserOrganizationService{
    id: String!
    showFirstSteps: Boolean!
    service: Service!
    serviceRoles: ServiceRoles!
    active: Boolean!
    userOrganization: UserOrganization
    createdAt: Datetime!
    updatedAt: Datetime!
}

type ServiceRoles{
    id: String!
    name: String!
    createdAt: Datetime!
    updatedAt: Datetime!
}

input AddUserInOrganizationServiceInput{
    userId: String!
    serviceName: ServiceName!
}

enum ServiceName {
    affiliate
    teste
}

enum ServiceRolesName {
    ADMIN,
    RESPONSIBLE,
    ANALYST,
    SALE
}

type Service{
    id: String!
    name: String!
    active: Boolean!
    updatedAt: Datetime!
    createdAt: Datetime!
    hasOrganization: Boolean
    serviceRoles: [ServiceRoles]!
}

input CreateServiceInOrganizationInput{
    serviceId: String!
    organizationId: String!
}