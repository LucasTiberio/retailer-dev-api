extend type Query {
  getSaasDefaultCommission: SaasDefaultCommission @hasOrganizationRole(role: ["ADMIN"]) @SaasIntegration @acceptTermsAndConditions @isVerified @isAuthenticated
  getSignaturesByOrganizationId: [SaasSignature]! @hasOrganizationRole(role: ["ADMIN"]) @SaasIntegration @acceptTermsAndConditions @isVerified @isAuthenticated
}

extend type Mutation {
  handleSassDefaultCommission(input: HandleSassDefaultCommissionInput!): SaasDefaultCommission!
    @hasOrganizationRole(role: ["ADMIN"])
    @SaasIntegration
    @organizationPaidVerify
    @acceptTermsAndConditions
    @isVerified
    @isAuthenticated
}

type SaasSignature {
  id: String!
  affiliate: UserOrganizationService!
  organization: Organization!
  createdAt: String!
  isPaid: Boolean!
  plataform: String!
  plataformIdentifier: String!
  commission: Float!
  value: Float!
  planName: String!
  organizationClientName: String!
  status: PlugoneSaasCommissionStatus!
}

enum PlugoneSaasCommissionStatus {
  approved
  pendent
  reproved
}

input HandleSassDefaultCommissionInput {
  type: SaasDefaultCommissionTypes!
  value: Float!
  period: SaasDefaultCommissionPeriod!
  paymentPeriod: Int!
  initPayCommission: Int!
  formOfPayment: SaasDefaultCommissionFormOfPayment!
  advancedOptions: Boolean!
}

type SaasDefaultCommission {
  id: String!
  organizationId: String!
  type: SaasDefaultCommissionTypes!
  value: Float!
  active: Boolean!
  paymentPeriod: Int!
  period: SaasDefaultCommissionPeriod!
  initPayCommission: Int!
  createdAt: String!
  updatedAt: String!
  formOfPayment: SaasDefaultCommissionFormOfPayment!
  advancedOptions: Boolean!
}

enum SaasDefaultCommissionFormOfPayment {
  unique
  recurrency
}

enum SaasDefaultCommissionTypes {
  absolute
  percent
}

enum SaasDefaultCommissionPeriod {
  lifetime
  personalized
}
