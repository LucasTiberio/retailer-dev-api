extend type Mutation {
  handleAffiliateStore(input: HandleAffiliateStoreInput!): AffiliateStore!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  addProductOnAffiliateStore(input: AddProductOnAffiliateStoreInput!): AffiliateStoreProduct!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  handleOrganizationAffiliateStore(input: HandleOrganizationAffiliateStoreInput!): OrganizationAffiliateStore!
    @hasOrganizationRole(role: ["ADMIN"])
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  addOrganizationAffiliateStoreBanner(input: AddOrganizationAffiliateStoreBannerInput!): OrganizationAffiliateStoreBanner!
    @hasOrganizationRole(role: ["ADMIN"])
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  removeOrganizationAffiliateStoreBanner(input: RemoveOrganizationAffiliateStoreBannerInput!): Boolean!
    @hasOrganizationRole(role: ["ADMIN"])
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  handleProductOnAffiliateStoreActivity(input: HandleProductOnAffiliateStoreActivityInput!): AffiliateStoreProduct!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  handleProductOnAffiliateStoreOrder(input: [HandleProductOnAffiliateStoreOrderInput]!): Boolean!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
  handleProductOnAffiliateStoreSearchable(input: HandleProductOnAffiliateStoreSearchableInput!): AffiliateStoreProduct!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @organizationPaidVerify
    @vtexFeature
    @isVerified
    @isAuthenticated
}

extend type Query {
  getAffiliateStore: AffiliateStore @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate") @isVerified @isAuthenticated
  getAffiliateStoreWithProducts(input: GetAffiliateStoreWithProductsInput!): AffiliateStoreWithProducts
  getAffiliateStoreProducts(input: GetAffiliateStoreProductsInput): [AffiliateStoreProductFormatted]!
    @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate")
    @vtexFeature
    @isVerified
    @isAuthenticated
  getAffiliateStoreAddedProducts: [AffiliateStoreProduct]! @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate") @vtexFeature @isVerified @isAuthenticated
  getOrganizationAffiliateStoreBanner: [OrganizationAffiliateStoreBanner]! @hasServiceRole(role: ["ANALYST"], serviceName: "affiliate") @vtexFeature @isVerified @isAuthenticated
  getOrganizationAffiliateStore: OrganizationAffiliateStore @hasOrganizationRole(role: ["ADMIN"]) @vtexFeature @isVerified @isAuthenticated
}

type AffiliateStoreWithProducts {
  affiliateStore: AffiliateStore!
  productsHtml: String
}

input GetAffiliateStoreWithProductsInput {
  organizationId: String!
  affiliateStoreSlug: String!
}

input RemoveOrganizationAffiliateStoreBannerInput {
  organizationAffiliateStoreBannerId: String!
}

input AddOrganizationAffiliateStoreBannerInput {
  data: Upload!
}

type OrganizationAffiliateStoreBanner {
  id: String!
  url: String!
}

input HandleOrganizationAffiliateStoreInput {
  active: Boolean
  shelfId: String
}

type OrganizationAffiliateStore {
  id: String!
  active: Boolean!
  scriptUrl: String
  organization: Organization!
  shelfId: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

input HandleProductOnAffiliateStoreSearchableInput {
  affiliateStoreProductId: String!
  searchable: Boolean!
}

input HandleProductOnAffiliateStoreOrderInput {
  affiliateStoreProductId: String!
  order: Int!
}

input HandleProductOnAffiliateStoreActivityInput {
  affiliateStoreProductId: String!
  activity: Boolean!
}

input AddProductOnAffiliateStoreInput {
  productId: String!
}

input GetAffiliateStoreProductsInput {
  term: String!
}

type AffiliateStoreProductFormatted {
  productId: String!
  price: String!
  image: String!
  name: String!
  added: Boolean!
}

input HandleAffiliateStoreInput {
  avatar: AffiliateAvatarInput
  cover: AffiliateCoverInput
  name: String
  slug: String
  description: String
  facebook: String
  youtube: String
  twitter: String
  tiktok: String
  instagram: String
}

input AffiliateAvatarInput {
  mimetype: String
  data: Upload!
}

input AffiliateCoverInput {
  mimetype: String
  data: Upload!
}

type AffiliateStore {
  id: String!
  usersOrganizationServiceRoles: UserOrganizationService!
  avatar: String
  cover: String
  name: String
  description: String
  facebook: String
  youtube: String
  slug: String
  twitter: String
  tiktok: String
  instagram: String
  createdAt: Datetime!
  updatedAt: Datetime!
}

type AffiliateStoreProduct {
  id: String!
  affiliateStoreId: String!
  productId: String!
  active: Boolean!
  searchable: Boolean!
  order: Int!
}
